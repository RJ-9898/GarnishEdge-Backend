# Generated by Django 5.0.9 on 2025-06-27 08:45

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="APICallLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255)),
                ("method", models.CharField(max_length=10)),
                ("timestamp", models.DateTimeField()),
            ],
            options={
                "db_table": "api_call_log",
            },
        ),
        migrations.CreateModel(
            name="ApiErrorLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("request_path", models.CharField(max_length=500)),
                ("request_method", models.CharField(max_length=10)),
                ("request_body", models.TextField(blank=True, null=True)),
                ("user_id", models.IntegerField(blank=True, null=True)),
                ("error_message", models.TextField()),
                ("traceback_info", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="APILog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_name", models.CharField(max_length=255)),
                ("request_method", models.CharField(max_length=10)),
                ("request_url", models.TextField()),
                ("request_headers", models.TextField(blank=True, null=True)),
                ("request_body", models.TextField(blank=True, null=True)),
                ("status_code", models.IntegerField()),
                ("error_message", models.TextField()),
                ("traceback", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("user", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="IWO_Details_PDF",
            fields=[
                ("IWO_ID", models.AutoField(primary_key=True, serialize=False)),
                ("cid", models.CharField(max_length=250)),
                ("ee_id", models.CharField(max_length=250)),
                ("IWO_Status", models.CharField(max_length=250)),
            ],
            options={
                "db_table": "iwo_details_pdf",
            },
        ),
        migrations.CreateModel(
            name="IWOPDFFiles",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("pdf_url", models.URLField()),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "iwo_pdf_files",
            },
        ),
        migrations.CreateModel(
            name="Logdata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_name", models.CharField(max_length=255)),
                ("user_id", models.CharField(blank=True, max_length=255, null=True)),
                ("endpoint", models.CharField(max_length=255)),
                ("status_code", models.IntegerField()),
                ("message", models.TextField()),
                ("status", models.CharField(max_length=20)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.CharField(max_length=20)),
                ("message", models.TextField()),
                ("action", models.CharField(blank=True, max_length=255, null=True)),
                ("details", models.CharField(blank=True, max_length=255, null=True)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "logger_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("file_name", models.CharField(blank=True, max_length=255, null=True)),
                ("line_number", models.IntegerField(blank=True, null=True)),
                (
                    "function_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("traceback", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="peo_table",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("peo_id", models.AutoField(primary_key=True, serialize=False)),
                ("peo_name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password1", models.CharField(max_length=255)),
                ("password2", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "peo_table",
            },
        ),
        migrations.CreateModel(
            name="setting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("employer_id", models.IntegerField()),
                ("modes", models.BooleanField()),
                ("visibilitys", models.BooleanField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "setting",
            },
        ),
        migrations.CreateModel(
            name="creditor_debt_applied_rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(blank=True, max_length=255, null=True)),
                ("case_id", models.CharField(blank=True, max_length=255, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("pay_period", models.CharField(max_length=255)),
                (
                    "withholding_cap",
                    models.CharField(blank=True, max_length=25005, null=True),
                ),
                (
                    "withholding_basis",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "creditor_debt_applied_rule",
                "indexes": [
                    models.Index(fields=["state"], name="creditor_de_state_311d07_idx"),
                    models.Index(
                        fields=["pay_period", "state"],
                        name="creditor_de_pay_per_58e013_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="creditor_debt_rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255, unique=True)),
                ("rule", models.CharField(blank=True, max_length=2500, null=True)),
                (
                    "deduction_basis",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "withholding_limit",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "creditor_debt_rule",
                "indexes": [
                    models.Index(fields=["state"], name="creditor_de_state_5c0922_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="creditor_debt_rule_edit_permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "deduction_basis",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "withholding_limit",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "state_config",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="edit_permission",
                        to="User_app.creditor_debt_rule",
                    ),
                ),
            ],
            options={
                "db_table": "creditor_debt_rule_edit_permission",
            },
        ),
        migrations.CreateModel(
            name="creditor_debt_exempt_amt_config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=50)),
                ("pay_period", models.CharField(max_length=50)),
                (
                    "minimum_hourly_wage_basis",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "minimum_wage_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "multiplier_lt",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "condition_expression_lt",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "lower_threshold_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "lower_threshold_percent1",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "lower_threshold_percent2",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "multiplier_mid",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "condition_expression_mid",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "mid_threshold_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "mid_threshold_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "multiplier_ut",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "condition_expression_ut",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "upper_threshold_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "upper_threshold_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "de_range_lower_to_upper_threshold_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "de_range_lower_to_mid_threshold_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "de_range_mid_to_upper_threshold_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "deducted_basis_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "is_filing_status",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "filing_status_percent",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "exempt_amt",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=20, null=True
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exempt_amounts",
                        to="User_app.creditor_debt_rule",
                    ),
                ),
                (
                    "edit_permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exempt_amounts",
                        to="User_app.creditor_debt_rule_edit_permission",
                    ),
                ),
            ],
            options={
                "db_table": "creditor_debt_exempt_amt_config",
            },
        ),
        migrations.CreateModel(
            name="employee_batch_data",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(max_length=255, unique=True)),
                ("case_id", models.CharField(max_length=255, unique=True)),
                ("work_state", models.CharField(max_length=255)),
                (
                    "no_of_exemption_including_self",
                    models.FloatField(blank=True, null=True),
                ),
                ("pay_period", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "filing_status",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("age", models.FloatField(blank=True, null=True)),
                ("is_blind", models.BooleanField(blank=True, null=True)),
                ("is_spouse_blind", models.BooleanField(blank=True, null=True)),
                ("spouse_age", models.FloatField(blank=True, null=True)),
                ("support_second_family", models.CharField(max_length=255)),
                (
                    "no_of_student_default_loan",
                    models.FloatField(blank=True, null=True),
                ),
                ("arrears_greater_than_12_weeks", models.CharField(max_length=255)),
                (
                    "no_of_dependent_exemption",
                    models.IntegerField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "employee_batch_data",
                "indexes": [
                    models.Index(
                        fields=["case_id"], name="employee_ba_case_id_37c297_idx"
                    ),
                    models.Index(
                        fields=["ee_id", "case_id"], name="employee_ba_ee_id_723db9_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="employee_detail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(max_length=255)),
                ("case_id", models.CharField(max_length=255)),
                ("age", models.CharField(max_length=255)),
                ("social_security_number", models.CharField(max_length=255)),
                ("is_blind", models.BooleanField(blank=True, null=True)),
                ("home_state", models.CharField(max_length=255)),
                ("work_state", models.CharField(max_length=255)),
                ("gender", models.CharField(blank=True, max_length=255, null=True)),
                ("number_of_exemptions", models.IntegerField()),
                ("filing_status", models.CharField(max_length=255)),
                ("marital_status", models.CharField(max_length=255)),
                ("number_of_student_default_loan", models.IntegerField()),
                ("support_second_family", models.BooleanField()),
                ("spouse_age", models.IntegerField(blank=True, null=True)),
                ("is_spouse_blind", models.BooleanField(blank=True, null=True)),
                ("record_import", models.DateTimeField(auto_now_add=True)),
                ("record_updated", models.DateTimeField(auto_now_add=True)),
                ("garnishment_fees_status", models.BooleanField()),
                ("garnishment_fees_suspended_till", models.DateField()),
                ("pay_period", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "employee_detail",
                "indexes": [
                    models.Index(fields=["ee_id"], name="employee_de_ee_id_3472c7_idx"),
                    models.Index(
                        fields=["case_id"], name="employee_de_case_id_553388_idx"
                    ),
                    models.Index(
                        fields=["ee_id", "case_id"], name="employee_de_ee_id_c03ba3_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="garnishment_batch_data",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(max_length=255)),
                ("case_id", models.CharField(max_length=255, unique=True)),
                ("garnishment_type", models.CharField(max_length=255)),
                (
                    "ordered_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "arrear_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_medical_support",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "past_due_medical_support",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_spousal_support",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "past_due_spousal_support",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "employee_case",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="garnishment_data",
                        to="User_app.employee_batch_data",
                        to_field="case_id",
                    ),
                ),
            ],
            options={
                "db_table": "garnishment_batch_data",
            },
        ),
        migrations.CreateModel(
            name="garnishment_fees",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                ("pay_period", models.CharField(max_length=255)),
                ("amount", models.CharField(blank=True, max_length=255, null=True)),
                ("status", models.CharField(max_length=255)),
                ("rules", models.CharField(max_length=255)),
                ("payable_by", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "garnishment_fees",
                "indexes": [
                    models.Index(fields=["state"], name="garnishment_state_edd343_idx"),
                    models.Index(fields=["type"], name="garnishment_type_699297_idx"),
                    models.Index(
                        fields=["pay_period", "state"],
                        name="garnishment_pay_per_69cafa_idx",
                    ),
                ],
                "unique_together": {("state", "pay_period")},
            },
        ),
        migrations.CreateModel(
            name="garnishment_fees_rules",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rule", models.CharField(max_length=255)),
                ("maximum_fee_deduction", models.CharField(max_length=255)),
                (
                    "per_pay_period",
                    models.DecimalField(decimal_places=2, max_digits=250),
                ),
                ("per_month", models.DecimalField(decimal_places=2, max_digits=250)),
                (
                    "per_remittance",
                    models.DecimalField(decimal_places=2, max_digits=250),
                ),
            ],
            options={
                "db_table": "garnishment_fees_rules",
                "indexes": [
                    models.Index(fields=["rule"], name="garnishment_rule_a3f9c2_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="garnishment_fees_states_rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                ("pay_period", models.CharField(max_length=255)),
                ("rule", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "garnishment_fees_states_rule",
                "indexes": [
                    models.Index(fields=["state"], name="garnishment_state_e90087_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="garnishment_order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("eeid", models.CharField(max_length=254)),
                ("fein", models.CharField(max_length=254)),
                ("case_id", models.CharField(blank=True, max_length=255, null=True)),
                ("work_state", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                ("sdu", models.CharField(blank=True, max_length=255, null=True)),
                ("start_date", models.DateField(blank=True, max_length=255, null=True)),
                ("end_date", models.DateField(blank=True, max_length=255, null=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=250)),
                ("arrear_greater_than_12_weeks", models.BooleanField(default=False)),
                (
                    "arrear_amount",
                    models.DecimalField(decimal_places=2, max_digits=250),
                ),
                ("record_updated", models.DateTimeField(auto_now_add=True)),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="garnishments",
                        to="User_app.employee_detail",
                    ),
                ),
            ],
            options={
                "db_table": "garnishment_order",
            },
        ),
        migrations.CreateModel(
            name="payroll_taxes_batch_data",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(max_length=255, unique=True)),
                ("case_id", models.CharField(max_length=255, unique=True)),
                ("wages", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "commission_and_bonus",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "non_accountable_allowances",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "gross_pay",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "debt",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "exemption_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "net_pay",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "federal_income_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "social_security_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "medicare_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "state_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "local_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "union_dues",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "wilmington_tax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "medical_insurance_pretax",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "industrial_insurance",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "life_insurance",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "california_sdi",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "employee_case",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payroll_data",
                        to="User_app.employee_batch_data",
                        to_field="case_id",
                    ),
                ),
            ],
            options={
                "db_table": "payroll_taxes_batch_data",
            },
        ),
        migrations.CreateModel(
            name="state_tax_levy_applied_rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ee_id", models.CharField(blank=True, max_length=1000, null=True)),
                ("case_id", models.CharField(blank=True, max_length=1000, null=True)),
                ("state", models.CharField(blank=True, max_length=1000, null=True)),
                ("pay_period", models.CharField(max_length=1000)),
                (
                    "deduction_basis",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "withholding_cap",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "withholding_limit",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "withholding_basis",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "withholding_limit_rule",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
            ],
            options={
                "db_table": "state_tax_levy_applied_rule",
                "indexes": [
                    models.Index(
                        fields=["case_id"], name="state_tax_l_case_id_cc0c54_idx"
                    ),
                    models.Index(fields=["ee_id"], name="state_tax_l_ee_id_65c524_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="state_tax_levy_rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255, unique=True)),
                (
                    "deduction_basis",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "withholding_limit",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "withholding_limit_rule",
                    models.CharField(blank=True, max_length=455, null=True),
                ),
            ],
            options={
                "db_table": "state_tax_levy_rule",
                "indexes": [
                    models.Index(fields=["state"], name="state_tax_l_state_650fde_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="state_tax_levy_rule_edit_permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "deduction_basis",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "withholding_limit",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "state_config",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="edit_permission",
                        to="User_app.state_tax_levy_rule",
                    ),
                ),
            ],
            options={
                "db_table": "state_tax_levy_rule_edit_permission",
            },
        ),
        migrations.CreateModel(
            name="state_tax_levy_exempt_amt_config",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.CharField(max_length=255)),
                ("pay_period", models.CharField(max_length=255)),
                ("minimum_hourly_wage_basis", models.CharField(max_length=255)),
                (
                    "minimum_wage_amount",
                    models.DecimalField(decimal_places=4, max_digits=250),
                ),
                (
                    "multiplier_lt",
                    models.DecimalField(decimal_places=4, max_digits=250),
                ),
                ("condition_expression_lt", models.CharField(blank=True, null=True)),
                (
                    "lower_threshold_amount",
                    models.DecimalField(decimal_places=4, max_digits=250),
                ),
                (
                    "multiplier_ut",
                    models.DecimalField(decimal_places=4, max_digits=250),
                ),
                ("condition_expression_ut", models.CharField(blank=True, null=True)),
                (
                    "upper_threshold_amount",
                    models.DecimalField(decimal_places=4, max_digits=250),
                ),
                (
                    "state_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="state_tax_levy_exempt_amounts",
                        to="User_app.state_tax_levy_rule",
                    ),
                ),
                (
                    "edit_permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exempt_amounts",
                        to="User_app.state_tax_levy_rule_edit_permission",
                    ),
                ),
            ],
            options={
                "db_table": "state_tax_levy_exempt_amt_config",
            },
        ),
        migrations.CreateModel(
            name="withholding_order_data",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.CharField(max_length=250)),
                ("state", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=255)),
                ("case_id", models.CharField(max_length=255)),
                ("order_id", models.CharField(max_length=255)),
                ("remittance_id", models.CharField(max_length=255)),
                ("fein", models.CharField(max_length=255)),
                ("employee_name", models.CharField(max_length=255)),
                (
                    "child1_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child2_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child3_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child4_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child5_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child6_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("child1_dob", models.CharField(blank=True, max_length=255, null=True)),
                ("child2_dob", models.CharField(blank=True, max_length=255, null=True)),
                ("child3_dob", models.CharField(blank=True, max_length=255, null=True)),
                ("child4_dob", models.CharField(blank=True, max_length=255, null=True)),
                ("child5_dob", models.CharField(blank=True, max_length=255, null=True)),
                ("child6_dob", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "past_due_cash_medical_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "current_spousal_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "past_due_spousal_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "other_order_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "total_amount_to_withhold_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "current_child_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "past_due_child_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "current_cash_medical_support_payperiod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("current_child_support_amt", models.FloatField(blank=True, null=True)),
                (
                    "past_due_cash_medical_support",
                    models.FloatField(blank=True, null=True),
                ),
                ("total_amt_to_withhold", models.FloatField(blank=True, null=True)),
                ("lump_sum_payment_amt", models.FloatField(blank=True, null=True)),
                (
                    "disposable_income_percentage",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("current_spousal_support", models.FloatField(blank=True, null=True)),
                ("other_order_amount", models.FloatField(blank=True, null=True)),
                ("ordered_amount_per_weekly", models.FloatField(blank=True, null=True)),
                (
                    "ordered_amount_per_biweekly",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "ordered_amount_per_monthly",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "ordered_amount_per_semimonthly",
                    models.FloatField(blank=True, null=True),
                ),
                ("final_payment_amount", models.FloatField(blank=True, null=True)),
                ("past_due_child_support", models.FloatField(blank=True, null=True)),
                ("past_due_spousal_support", models.FloatField(blank=True, null=True)),
                (
                    "current_cash_medical_support",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "termination_date",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "tribal_payee",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "income_withholding_order",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "arrears_greater_than_12_weeks",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "one_time_order",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "termination_of_iwo",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "amended_iwo",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "never_employed_no_income",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "not_currently_employed",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "child_support_agency",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("court", models.CharField(blank=True, max_length=255, null=True)),
                ("attorney", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "private_individual",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "withholding_order_data",
                "indexes": [
                    models.Index(fields=["id"], name="withholding_id_7e4518_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="Employer_Profile",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("username", models.CharField(max_length=100, unique=True)),
                ("employer_name", models.CharField(default="ABS", max_length=100)),
                (
                    "federal_employer_identification_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "street_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("state", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                ("zipcode", models.CharField(blank=True, max_length=10, null=True)),
                ("number_of_employees", models.IntegerField(blank=True, null=True)),
                ("department", models.CharField(blank=True, max_length=255, null=True)),
                ("location", models.CharField(blank=True, max_length=255, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "employer_profile",
            },
        ),
        migrations.AddIndex(
            model_name="creditor_debt_rule_edit_permission",
            index=models.Index(fields=["state"], name="creditor_de_state_8e10a1_idx"),
        ),
        migrations.AddIndex(
            model_name="creditor_debt_exempt_amt_config",
            index=models.Index(fields=["state"], name="creditor_de_state_ffad43_idx"),
        ),
        migrations.AddIndex(
            model_name="creditor_debt_exempt_amt_config",
            index=models.Index(
                fields=["pay_period", "state"], name="creditor_de_pay_per_7d1d61_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="garnishment_batch_data",
            index=models.Index(fields=["ee_id"], name="garnishment_ee_id_52a382_idx"),
        ),
        migrations.AddIndex(
            model_name="garnishment_batch_data",
            index=models.Index(
                fields=["ee_id", "case_id"], name="garnishment_ee_id_7e12c7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="garnishment_order",
            index=models.Index(fields=["eeid"], name="garnishment_eeid_214ee0_idx"),
        ),
        migrations.AddIndex(
            model_name="garnishment_order",
            index=models.Index(
                fields=["case_id"], name="garnishment_case_id_1310e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="garnishment_order",
            index=models.Index(
                fields=["case_id", "eeid"], name="garnishment_case_id_f766b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payroll_taxes_batch_data",
            index=models.Index(
                fields=["case_id"], name="payroll_tax_case_id_64fd14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payroll_taxes_batch_data",
            index=models.Index(
                fields=["ee_id", "case_id"], name="payroll_tax_ee_id_ae82ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="state_tax_levy_rule_edit_permission",
            index=models.Index(fields=["state"], name="state_tax_l_state_0c25e6_idx"),
        ),
        migrations.AddIndex(
            model_name="state_tax_levy_exempt_amt_config",
            index=models.Index(fields=["state"], name="state_tax_l_state_1e05e1_idx"),
        ),
        migrations.AddIndex(
            model_name="state_tax_levy_exempt_amt_config",
            index=models.Index(
                fields=["pay_period", "state"], name="state_tax_l_pay_per_771686_idx"
            ),
        ),
    ]
